[{"content":"Instead of having one big release at the end of a long development cycle the idea of Extreme Programming tries to release often.\nThe main advantages of small releases are the gain of experience. This show the accuracy of the team towards the project.\nExtreme Programming is promoting small releases through CI (continuous integration) and some other extreme programming practices.\nWith small releases a team can deliver small working incement in few weeks.\ngraph LR A((Releasing is hard)) -- Vicious cycle --\u0026gt; B((Release seldom)) B -- Vicious cycle --\u0026gt; A C((Releasing is hard)) -- Virtuous cycle --\u0026gt; D((Release seldom)) D -- Virtuous cycle --\u0026gt; C Advantages  Deliver real business value Get business value sooner Increases customer confidence Rapid feedback Adapt quickly to changes in requirements  How to do  Create a release plan  Plan small units to release to the customer early   Quantify in the release plan  Scope Resources Time Quality   Iteration max two weeks   Learn from the past and continuously improve the customer\u0026rsquo;s requirements.\n ","description":"An idea of Extreme Programming and Scrum","id":2,"section":"posts","tags":["extreme programming","scrum"],"title":"Extreme Programming and Scrum","uri":"https://perezre.de/en/posts/art351/"},{"content":"What is Demand Generation? It is about creating brand awareness and attracting new useres to a business.\nFor example there are\n Blog posts Social Media posts Podcasts YouTube Videos  What is Lead Generation? This is used to convert the attracted users into leads to become sales-ready.\nExamples for some Lead Generation are\n eBooks free PDF Webinars Tutorials Meetings  How to develop buyers Persona? Ask yourself the following question\n Who are your potential buyers? What are their interests? Where do they buy stuff usually? \u0026hellip;   The more you know about your potential customers the better for your future products/services\n When you spend some effort in research and developing your potential buyers persona. This will help you to understand your target custormer better, so you can develop a better solution that they\u0026rsquo;re intrested and will solve their problems.\nAudit your own Content Ask yourself for example:\n How good is your blog content? How effective is your social media content? \u0026hellip;   Review your existing content and find what you need to focus on, sometime less is more\n Create Demand Generation Campaigns Goal is to match marketing campaigns with the demand.\nFor example you can use\n SEO keywords Make sure your audience care Does your audience search about related problems   Key is always keep your buyers persona in mind\n Combine both First use demand generation to create the demand for your product and service. Once setup, you can produce lead generation with marketing strategies. This will attract bigger audience.\nYour created content and the generated offers will make your target audience stay tunes with your brand. Your demand generation can be used to create ongoing interest for your customers. Or you can engage with them with upselling content or content that aims to nurture them to by more.\nConclusion Marketing leads is essential, but Demand Generation is one of the most usefull marketing tools. Both Lead- and Demand Generation are important to convert sales. With a combined marketing strategy you\u0026rsquo;ll be able to attract more potential buyers and keep them engaged with your product or service in the long-run.\n","description":"Understanding Lead- and Demand Generation and how it works","id":3,"section":"posts","tags":["B2B","Lead Generation","Demand Generation"],"title":"Lead Generation and Demand Generation","uri":"https://perezre.de/en/posts/art350/"},{"content":"Zapier - Introduction What is Zapier? First Zap Zaps I Zaps II Data Filtering Build-in Apps Task History ","description":"Everything about Zapier","id":4,"section":"posts","tags":["zapier"],"title":"Zapier","uri":"https://perezre.de/en/posts/tuts/zapier/"},{"content":"Webflow - Introduction What is Webflow? Basics of Web Templates Do It Yourself Intro Components Style Template Editing Layouts ","description":"Everything about webflow","id":5,"section":"posts","tags":["webflow"],"title":"Webflow","uri":"https://perezre.de/en/posts/tuts/webflow/"},{"content":"Web - HTML Web Introduction HTML/CSS Introduction CSS and HTML are the core languages used for creating web pages and web-based applications. HTML was invnted in 1989, while CSS was invented in 1996.\nHTML stand for HyperText Markup Language is a markup language for creating the structure and content of a webpage using text, images, links, and containers.\nMeanwhile CSS, or Cascading Style Sheets, is used to modify the design and display of those HTML elements.\nHTML is made up of content between \u0026lt;tags\u0026gt;, whereas CSS is made of selectors followed by a (declaration block).\nWhen creating a website, all of the unique HTML and CSS files for the same website are usually located inside a folder like so:\n1 2 3 4 5 6 7  /website-folder /html_files main.html contact.html /css_files main.css contact.css   HTML Defined HTML, or Hypertext Markup Language, is an exxential building block of every web page.\nHTML\u0026rsquo;s primary purpose is to list the content used in the web page. HTML will display text, labels, lists, insert photos and other media, create hyperlinks, buttons, and containers. This is all done with appropriate HTML elements.\nAdditionally, each HTML element can be used to separate content into sections. You can also nest HTML elements with one another for better control over the page layouts and content.\nHowever, HTML is not good for creating animations, managing responsive layouts, and other similar interactions within the content.\nCSS Defined CSS or Cascading Style Sheets is a stylesheet language used to describe the presentation of an HTML, XML, or XHTML document. It\u0026rsquo;s used to provide styling for text, images, \u0026amp; links.\nIn short, CSS is used to create responsive layouts, animations, styling text, and positioning containers. By applyiing CSS, you add the look and feel that you\u0026rsquo;d like to your websites.\nHTML/CSS Code CSS and HTML are the core languages used for creating web panges and web-based applications.\nHTML creates theh structure and content of a webpage with text, image, links, and containers, while CSS modifies the design and display of those items in the HTML pages.\nHTML is made up of content between tags: \u0026lt;tag\u0026gt;Content\u0026lt;/tag\u0026gt;.\nCSS is made of selectors folllowed by a declaration block: selector {declaration block}.\nExample:\n1 2 3 4 5 6  \u0026lt;h2\u0026gt; Heading \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; Paragraph \u0026lt;/p\u0026gt;   Example:\n1 2  p { color: red; } h2 { font-size: 24px; }   In the HTML example above, we create a heading and paragraph elements.\nIn the CSS example above, we set the HTML \u0026lt;p\u0026gt; elements content to the color red, and the font size of the \u0026lt;h2\u0026gt; elements content to 24 pixels.\nHTML/CSS in the Browser HTML and CSS are languages used by browsers to present information to the users.\nAn HTML web pages will display text, images, links, and containers, but has little control over how that content appears.\nA CSS document will provide the rules for how the text, images, links, and containers should appear - whether it\u0026rsquo;s setting text to bold or italic, setting width, height, and position for an image or container. If a .css file is opend in browser, the browser would just display the CSS code exactly as it is written in a code editor:\nLet\u0026rsquo;s say we have 2 files:\nHTML file:\n1 2 3  \u0026lt;p\u0026gt; Paragraph \u0026lt;/p\u0026gt;   CSS file:\np { color: green; } Loading only the HTML file gives the paragraph mentioned above.\nLoading both files gives the paragraph mentioned above and colors it gree.\nHowever, loading just the CSS file will only show the text p { color: green; }\nHTML Basic HTML Structure Core HTML Elements Web Page Structure Advanced Images Links I Links II Lists Media Forms Advanced Input Controls Tables Meta Elements I Mete Elements II Sectioning Elements Formating HTML Elements Meter \u0026amp; Progress Formatting Text Elements I Formatting Text Elements II Advanced Text Input Advanced Button Attributes Interface Form Attributes Global Attributes Semantic Sections Citation Elements Computer Code Best Practices HTML Entities HTML Versions Styling Introduction to CSS CSS Basics The Box Model Positioning Dimensions \u0026amp; Box Sizing Practical CSS Typography how-to\u0026rsquo;s Centring Recipes Colors Tips Positioning Tips Styling I Styling II Styling III Pseudo Classes I Pseude Classes II Pseudo Elements Flexbox Features Recipes Responsive Design Tips Sass I Sass II Sass III Animations CSS Animation ","description":"Everything about web","id":6,"section":"posts","tags":["web"],"title":"Web","uri":"https://perezre.de/en/posts/tuts/web/"},{"content":"TypeSript - Introduction Intro to TypeScript Using Types Basic Types Classes \u0026amp; Interfaces ","description":"Everything about TypeScript","id":7,"section":"posts","tags":["typescript"],"title":"Typescript","uri":"https://perezre.de/en/posts/tuts/typescript/"},{"content":"SQL - Quering Data What is SQL? What is SQL? SQL stands for Structured Query Language.\nIt\u0026rsquo;s a query language - a type of language that lets one interact with a database.\nOne use queries to do so.\nExample:\n1  SELECT * FROM users;   The query above return all the rows and columns from the users table.\nWhy Learn SQL? Many argue that SQL is the most useful technical skill to learn in general.\n It\u0026rsquo;s valuable across many roles  Wheather one is a coder, or in product, analysis, marketing, operations, QA or even sales - SQL will make life easier.\nOne will be seen like a superhero  One will be more self-sufficient with data. Others will come to one for advice. It adds a lot to the resume.\nIt\u0026rsquo;s not going anywhere  It\u0026rsquo;s been around for over 40 years. And yet it\u0026rsquo;s the structure for the top 4 databases, and the 3rd most popular programming language in general.\nHow to use SQL? In terms of setup, there isn\u0026rsquo;t a universal program or app that one install. Different databases have different connection methods.\n Over time, different flavors of SQL were created.\n First Query The first query:\n1  SELECT * FROM users;   This code retrieves all the data from the users table. It\u0026rsquo;s often used to inspect what\u0026rsquo;s inside a database.\nThe next insights will teach how to build more complicted and useful queries.\nUsing SELECT Building Queries Special Operators Aggregate Queries JOINs Database Clients SQL - Manipulating Data Introduction Insert Update Delete SQL - Defining Data Create Data Types Alter Indices Storing BLOBs Storing JSON ","description":"Everything about SQL","id":8,"section":"posts","tags":["sql"],"title":"SQL","uri":"https://perezre.de/en/posts/tuts/sql/"},{"content":"Spreadsheet - Introduction Introduction Terminology \u0026amp; Basics Templates Data Types \u0026amp; Validation Filtering \u0026amp; Grouping Functions \u0026amp; Formulas Charts Spreadsheet - Intermediate Chart Types \u0026amp; Data Chart Customizations Importing Data Intro Pivot Tables Conditional Formatting Add-Ons Pivot Table Rules \u0026amp; Data Spreadsheet - Functions \u0026amp; Formulas Logical Functions Number Functions Text \u0026amp; Date Functions Parser Functions Math Functions Import Functions Error Checking Functions Google Functions Sparkline Function Comparison Operators \u0026amp; Functions Spreadsheet - Tips \u0026amp; Tricks Tips \u0026amp; Tricks I Tips \u0026amp; Tricks II Common Mistages Spreadsheet Shortcuts ","description":"Everything about spreadsheets","id":9,"section":"posts","tags":["spreadsheet"],"title":"Spreadsheets","uri":"https://perezre.de/en/posts/tuts/spreadsheets/"},{"content":"Security - Application Security Intro to AppSec What is AppSec? AppSec (short for Application security) is simply a set of measures taken to improve the security of an application.\nThis is often done by finding, fixing, and preventing security culnerabilities.\nThere have been many data breaches since the beginning of the internet, and they now represent the main reason for govermments creating data protection regulations.\nIn 2019, Veracode reported that more than 80% of webapps have at least one security flaw.\nWhy Do You Need AppSec? Long forgotten are the days when application security was considered optional.\nWith more and more data being generated every year, companies need to make sure that their users' data is safe.\n In 2013 Adobe lost almost 3 million credit card records and an undetermined amount of user accounts.\n This whole ordeal ended up costing them 1 million dollars\nReason for makinig apps secure:\n reputation (user don\u0026rsquo;t trust an app that is known for its security problems) keep the data safe (in case of data breach, you can incurpenalties according to legislation in multiple countries) your own information can be used against you (proprietary information leaking out, blackmailing, and others) Google rankings (one get less points if one don\u0026rsquo;t follow security best practices which translates to less traffic)  OWASP \u0026amp; Open Source Initiatives Much of the practice in working with security means finding and monitoring lists of common vulnerabilities.\nBecause it\u0026rsquo;s impossible to do all the research oneself, one will want to form a habit of checking the headlines and top vulnerability lists.\nOWASP (short for the The Open Web Application Security Project) is part of non-profit group that aggregates common security flaws and vulnerabilities in networked applications.\nIt provides practical mitigation strategies, and is one of the most beginner-friendly organization that makes up the vast body of application security.\nAutomated Tools OSI I OSI II Securing Each Layer I Securing Each Layer II XSS XXE SQL Injection Deserialization Dependency Analysis Access Control Security Misconfiguration ","description":"Everything about Security","id":10,"section":"posts","tags":["security"],"title":"Security","uri":"https://perezre.de/en/posts/tuts/security/"},{"content":"Regex - Introduction Intro Quantifiers and Wildcards Ranges, Groups and More! Email and Password Example More Practical Examples Even More Practical Examples Regex \u0026amp; JavaScript ","description":"Everything about Regex","id":11,"section":"posts","tags":["regex"],"title":"Regex","uri":"https://perezre.de/en/posts/tuts/regex/"},{"content":"React - Introduction Intro to React Fundamentals I Fundamentals II Basic of React How to React Introduction to Hooks React - Intermediary Props validation Advanced Props Props III Hooks I Redux React - Tips Common Mistages Good to know Gotchas Redux Tips ","description":"Everything about React","id":12,"section":"posts","tags":["react"],"title":"React","uri":"https://perezre.de/en/posts/tuts/react/"},{"content":"Python - Core Meet Python Python Intro Python is a popular high-level programming language.\nThat means it\u0026rsquo;s designed to be easy to read, using English keywords and simple syntax.\nFor example, here\u0026rsquo;s how one might check whether a number is greater than another number:\n1 2 3 4 5 6  my_age = 23 legal_age = 21 if my_age \u0026gt;= legal_age: print(\u0026#34;You can have a beer!\u0026#34;) else: print(\u0026#34;Unlucky.\u0026#34;)   Python is also a general-purpose programming language. That means it can be used for just about anything.\nOne can use it to build website, web apps and desktop apps. But it\u0026rsquo;s also used in scientific computing, artificial intelligence, and data analysis!\nWhy learn Python? Python is seen as the number one language to learn. Here are a few reasons why:\n It\u0026rsquo;s simple to read and understand  This makes it an ideal language for beginners to learn. And it acts as a stepping-stone for learning other object-oriented languages.\nPython is also concise.\nFor the same task, Python requires 3-5 times less code than Java, and up to 10 times less code than C++.\nIt\u0026rsquo;s a powerful language for data science  Python is the preferred language for Data Science and Machine Learning. Both areas with exciting work and a growing demand for jobs.\nA huge community of web developers use it  It\u0026rsquo;s popularity for web development means that there are numerous open source libraries, frameworks and source of help for beginners.\nOne can use Python to build whatever one want to build, from a scraper to an e-commerce site.\nPython Versions Python3 is the latest and best version to learn.\nPython3 is easier for beginners to understand, and is being updated frequently so there are fewer bugs.\nIn the latest version of Python, text is printed as follows:\n1  print(\u0026#39;Python 3\u0026#39;)   Older version\n1  print \u0026#39;Python 2\u0026#39;   Python treats print as a function rather than a statement, so one must pass items that one want printed in parentheses.\nSome programmers still use versions of Python 2, with 2.7 being the last major release.\n Since the start of 2020 Python HQ are no longer working on improvments to Python 2 and have advised everyone to switch over to Python 3.\n Python Environment Python comes pre-installed on most operating systems. It can also be downloaded online for free.\nOnce installed, one can type python3, python or pyto run the Python interpreter from the shell:\n1 2 3 4 5  # python 3.7.6 # (default, Dec 30 2019, 11:42:19) # Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or # \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt;   This gives one a local interactive environment where one can run Python code and output the results.\n The Python interpreter is one playground. So test things!\n It is the ideal place for testing out small pieces of code or calculations.\nFor example:\n1 2 3  \u0026gt;\u0026gt;\u0026gt; 4 * 5 # 20 \u0026gt;\u0026gt;\u0026gt;    For anything longer than a few lines of code, it\u0026rsquo;s much easier to use a text editor.\n Some of the most popular text editors are Notepad, Atom, VIM, Sublime Text and Visual Studio Code.\nRecommended is Visual Studio Code for beginners.\nOnce one is using a text editor one can save files using a .py extension and then open them from the shell by running:\n1  python3 myPyFile.py   Hello World! Write the first Python program, and print Hello World! to the screen!\nTo do this, in the Python interpreter, one can use Python\u0026rsquo;s print function as follows:\n1  print(\u0026#39;Hello World!\u0026#39;)   The output is\n1  # Hello World!   In this program, one use the Python\u0026rsquo;s built-in print function.\nSyntax \u0026amp; Numerical Operators Control Flow I Control Flow II Sequential Data Types I Sequential Data Types II Unordered Data Types Looping Functions Tips Intro to Modules Basic File Manipulation Playing with Time Working with Strings Classes I Classes II Utilities I Is Your Python Healthy? Testing Math Recipes String recipes More on Lists More on Sets More on Dictionaries Recipes Deep into Collections Advanced Queues More on Classes Bits, bytes \u0026amp; Hexadecimals Memory Allocation Advanced Referencing Utilities II Python - Functional Programming Manipulating Arrays Analyzing Arrays Comprehension Decorators Functional Programming I Functional Programming II Generators Immutability Introduction to Iterators ","description":"Everything about Python","id":13,"section":"posts","tags":["python"],"title":"Python","uri":"https://perezre.de/en/posts/tuts/python/"},{"content":"MongoDB - Introduction Intro Databases Create \u0026amp; Read Documents Update \u0026amp; Delete Documents Query Operators Aggregation I Aggregation II Delete \u0026amp; Query Save, Project \u0026amp; Rename Arithmetic Aggregation I Arithmetic Aggregation II Aggregation III Aggregation IV Querying Arrays ","description":"Everything about MongoDB","id":14,"section":"posts","tags":["mongodb"],"title":"MongoDB","uri":"https://perezre.de/en/posts/tuts/mongodb/"},{"content":"Linux - User \u0026amp; File Management Introduction Environment Variables Manipulation Variables File Management File Permissions File Management Tips Shell Pipelines User Management User Permissions Terminal Power User Tips Conditions File Management Tips II Default Permissions Super User \u0026amp; Root Terminal History Pipeline Tools User Management Utilities Linux - Jobs \u0026amp; Processes, Data Manipulation Basics of Process Management File Streams Grep \u0026amp; Background Tasks Utilities Working with Files Data Manipulation Recipes Crontab Linux - System and Package management Basic Package Management Disk \u0026amp; Time Management System Monitoring I System Monitoring II System Monitoring III Debian System Recipes Linux - Networking \u0026amp; Security Basic of Linux Networking Making SSH Connections Maintaining your SSH Bandwith Monitoring Tools Firewall Configuration and Maintenance Connecting to Remote Hosts with SSH Webscraping Networkiing Tips Security ","description":"Everything about Linux","id":15,"section":"posts","tags":["linux"],"title":"Linux","uri":"https://perezre.de/en/posts/tuts/linux/"},{"content":"JavaScript - Core Introduction JavaScript Why Learn JavaScript? JavaScript was originally developed to add functionality to web pages but it\u0026rsquo;s now used for much more!\nSome reason to start with JavaScript:\n JavaScript runs on much any platform from web pages, to server backends and even hardware There are some great build and deployment tools and frameworks written in JavaScript that are useful in many applications It\u0026rsquo;s great introduction to functional programming concepts All one need to write JavaScript is a simple text editor High demand for JavaScript developers JavaScript is easy to learn. Beware - it\u0026rsquo;s hard to master!  Java Script Basics - Part 1 Like most programming languages, JavaScript has a number of syntax rules that it must adhere to.\nVariables\nVariables are the essential building blocks of programs. They are used to store a value and are given a name.\nDeclaring a variable in JavaScript can be done in 3 ways.\nThe first is using the let keyword:\n1  let firstName = \u0026#34;Joe\u0026#34;;   Which allows also to change what the variable points to, if needed:\n1 2  let firstName = \u0026#34;Joe\u0026#34;; firstName = \u0026#34;Changed\u0026#34;; // works   One can also declare a variable using const, but in this cas one cannot change what it points to:\nconst firstName = \u0026quot;Joe\u0026quot;; firstName = \u0026quot;Changed\u0026quot;; // Error The oldest way of declaring a variable in JavaScript is using var:\n1 2  var firstName = \u0026#34;Joe\u0026#34;; firstName = \u0026#34;Changed\u0026#34;; // works   More to come about the differences between let, const and var.\nSemicolon\nStatements in JavaScript end in a ;. Based on the ECMAScript rules however, adding a ; isn\u0026rsquo;t actually required (but common practice):\n1  let firstName = \u0026#34;Joe\u0026#34;;   Omitting a semicolon in certain situations can cause problems. JavaScript has a feature called Automatic Semicolon Insertion (ASI) which means that, if one omit a semicolon, JavaScript will automatically add it where it thinks it should go.\nThis can lead to unexpected results. Thus, it\u0026rsquo;s usually recommended to insert the ; manually, or use a tool such as Prettier.\nJavaScript Basics - Part 2 Some more rules.\nCase Sensitivity\nEverything in JavaScript is case sensitive.\n1 2 3 4 5  let password; // not the same as let pasSword; // or let PASSWORD;   Keywords\nLike most languages, there are a number of reserved words in JavaScript that one cannot use for functions and variables e.g.\n var let new \u0026hellip;  Identifier naming rules\nWhen naming any function, property or variable, the first character must be a letter, $ sign or underscore.\nAfter the first character, one is free to use numbers, letters, dollar sign or underscores.\n1 2 3 4  let name = \u0026#34;Joe\u0026#34;; // works let $taxRate = 2.41; // works let _id = 42; // works let 2Company = \u0026#34;Joe\u0026#34;; // error   Comments\nComments can be created in 2 ways in JavaScript.\nAs a single line comment:\n1  // Single line comment   Add sinle line comments to the same line of other code:\n1  let company = \u0026#34;Company\u0026#34;; // define company   Or if one have more text one can use a block comment:\n1 2 3  /* Block comment */   console.* in JavaScript The console.* methods output information to a cosole.\nFor example, console.log can print out a message:\n1  console.log(\u0026#34;This is a message!\u0026#34;); // This is a message   More commonly it is used to show the current value of a variable when debugging. In this example we are logging the value of a variable called username:\n1  console.log(\u0026#34;Username: \u0026#34; + username); // Username: myname   A few other useful console methods include:\nSending a warning to the console.\n1  console.warn(\u0026#34;Source not changed\u0026#34;)   Sending an error message to the console.\n1  console.error(\u0026#34;Not found!\u0026#34;)   Viewing the current stack trace.\n1  console.trace()   In JavaScript, there is no specification for how console.* methods behave. Each environment adds its own methods and behavior.\nWhen creating a web application, the use of console.* is critical for quickly debugging problems. Whenever one need more information on a variable or would like to know where one code stops working, one should apply a console statement at the area in question. console.* statements can be viewed in Google Chrome by pressing Ctrl+Shift+i, and in Firefox by pressing Ctrl+Shift+k.\nIn addition to this, console.* can be used to pipe information to stdout in NodeJS.\n It is consided best practice to not include any console.* methods in production code.\n Types Flow Control Functions History \u0026amp; Obscura Arrays Objects Types II Strings I Strings II Numbers Array Methods Funtions II Scope Debugging in JavaScript Functions III Numbers Recipes JavaScript Depths Data Recipes JavaScript - ECMAscript Intro to ECMAScript Function Improvements New Numericals Array Updates Destructuring String Upgrades Spread, Map, Set and Math String Flexibility Classes \u0026amp; Modules Promises Async Tips Symbol Iterators \u0026amp; Generators Generators \u0026amp; Proxy JavaScript - Browser APIs Bowser APIs The Document Object Navigation Toolbox I Measuring Performance Reading and Writing Toolbox II User Interaction JavaScript - NodeJS Intro to Node.JS File I/O Events Web Servers Modules Streams Error Handling Operational vs. Programmer Errors Code Style Recommendations Express I Express II Code Structure Patterns Tools Node Execution Environment Processes \u0026amp; Clustering JavaScript - NPM Intro to NPM Features I Packages and modules Features II Publishing your own Node.JS Package Tools I ","description":"Everything about JavaScript","id":16,"section":"posts","tags":["javascript"],"title":"JavaScript","uri":"https://perezre.de/en/posts/tuts/javascript/"},{"content":"Java - Fundamentals Introduction to Java Java is a programming language that follows the Object-oriented programming paradigm (OOP)\nIt was first released in 1995 by Sun Microsystems, and has since grown to be one of the most used programming languages.\nThe fact that it\u0026rsquo;s still one of the most-used languages over 25 years later shows how durable it is.\nJava is a secure, and portable language.\nWhy Learn Java? Reasons to learn Java:\n It\u0026rsquo;s one of the most used programming language in the world The basic concepts are relatively easy to understand. It\u0026rsquo;s statically typed, meaning that the code can\u0026rsquo;t be beuild before solving the errors. Even though the sticker environment doesen\u0026rsquo;t necessarily mean a better one, it allows developers to catch bugs early on. Once one create the program, one can run it on any machine. This principle is called \u0026ldquo;write once, run anywhere\u0026rdquo; (WORA). More in the insight. It has continued support, with the roadmap being available publicly.  There are many more reasons one should learn Java. The only downside is, as with all other skills, that it might take some time\nJava Virtual Machine Once a Java application is created one can run it on any system. This is thanks to the Java Virtual Machine.\nFirst, let\u0026rsquo;s take a look at how one computer processes information. Because it is an electronic device, the language that it speaks is electricity. Information is received in binary numbers.\nUsing a sequence of 8 binary numbers, one can create text. For example, the letter A is 01000001.\nWhat does this have to do with Java? The process is the following:\n The code is compiled to binary numbers. The new intermediary code is fied to the Java Virtual Machine (JVM) The JVM then proceeds to identify the operating system and convert the intermediary code to native code  Hello Java! How to build the first app.\nThere are a couple of choices when it comes to where to write Java code simple text editors (Atom, Sublime, Emacs, Vim) or IDEs (IntelliJ, Eclipse). This one can download alff of them for free.\nProbably the most used first code snippet for any language is the Hello world one.\n1 2 3 4 5 6 7 8  // HelloJava.java  public class HelloJava{ public static void main(String[] args) { System.out.println(\u0026#34;Hello Java!\u0026#34;); } } // Hello Java!s   Compiling and Running Java Code Before the Java Virtual Machine can do its part and run the code, a compiler is needed to get the bytecode understandable by the JVM.\nThis process is done by an Integrated Development Environment (IDE) automatically. If one is not using and IDE, both the compilation and interpretation can be run manually.\nIn both cases, a Java compiler and the JVM have to be installed on the computer. One can get them by installing the Java Development Kit (JDK).\nTo run the HelloJava.java example:\n Compile it to bytecode  1  javac HelloWorld.java   Run the resulting bytecode  1 2  java HelloWorld Hello World!   Java Basics Operators I Operators II Tip I Tip II Tip III Default Methods Iteration Memory Object-Oriented Programming Paradigm Modifiers Class Dependency I Class Dependency II Exceptions I Exceptions II Patterns Tips IV Class Interface Tips The abstract keyword Immutability Serialization Tips V Annotations I Annotations II Annotations III Java - Data Management Arrays Byte Operations I File Management Numbers I Numbers II Strings I Strings II Strings III Tips I Wildcards in Generic Code Writing Generic Code Buffered Streams Data Structures Implementations File \u0026amp; System Manipulation I File \u0026amp; System Manipulation II Tips II Useful Tools I Useful Tools II File \u0026amp; System Manipulation III Java - Testing Testing I Testing II Java Threading Threading Deadlocks Synchronization I Synchronization II Deadlocks ","description":"Everything about Java","id":17,"section":"posts","tags":["java"],"title":"Java","uri":"https://perezre.de/en/posts/tuts/java/"},{"content":"Go - Introduction Introduction Meet Go Go is a statically typed, fast compiled, and open-source language designed by Google.\n Common name for Go is Golang because of the website of golang.org. the domain name go.org wasn\u0026rsquo;t available when the language was created.\n Golang was created because the developers at Google wanted to make a new language that supports modern multicore machines and large codebases.\nThe design of Golang aims to have the readability and usability of JavaScript or Python while also having great performance with multiprocessing CPUs and networking.\nThe Go community says that Go was born out of the need for efficency, safety, and ease of programming.\nThe language syntax is part of the C-family.\nWhy Learn Go Developers use Go to build things ranging from banking servers, productivity tools, and even cryptocurrency systems.\nDue to its smalls size and efficient architecture, the Go language is quick to pick up and fast to run.\nEase of programming\nGo is one of the rare languages where pretty much all programs maintain the same code formatting. This makes collaboration easier because Go programs are understandable by other programmers.\nThe standard library in Go contains core tools that are needed to get started and be productive.\nWhat makes Go quick to learn is that is relatively small in size.\nEfficiency\nGo code compiles insanely fast compared to its predecessor C.\n Even huge Go programs will compile in seconds.\n Modern computers have many powerful features, such as multiple CPUs, that old languages such as C are hard to adapt to.\nBuilding programs that can efficiently take advantage of modern computers is core part of Go.\n One way to think of Go is as a low-level language with high-level concepts.\n How to Install Go To install Go on the machine, go to the official website and download the version.\nThe installation process is the same as with any other program, just follow the instructions.\nAfter the installation is done, open any terminal and type:\n1  go version   If Go was successfully installed, depending on the version and operation system, one will get a message similar to this one:\n1  go version go1.14 windows.amd64   Packages All Go programs are made up of one or more packages.\nEvery program in Go starts in the main package and there can only be one main package.\nThe top of a Go file contains the package name\n1 2 3 4 5  // declare that this code // belongs to the main package package main // ... rest of the code    A package name is written in lowercase letters\n A package can import any other package using the import statement:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  package main // We can import packages // one by one, using the // Multi-statement import  import \u0026#34;fmt\u0026#34; import \u0026#34;math\u0026#34; import \u0026#34;zip\u0026#34; import \u0026#34;json\u0026#34; // or one can combine the // imports as a single // statement, called // Factored import  import( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; \u0026#34;zip\u0026#34; \u0026#34;json\u0026#34; )   Both ways work the same, however, it is common practice to use the factored import as it\u0026rsquo;s quicker to type and easier to change.\n Factoring means calling a keyword once on multiple instances.\n Hello World To create a program in Go you need the editor of choice and create a file named hello.go, with the following code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // declare the main packages  package main // tell Go that this program // needs functions, or other // elements from the package fmt  import \u0026#34;fmt\u0026#34; // declare the main function // of the Go program  func main(){ // run the Printf function  // from the fmt package  // which will display text  // Hello World  fmt.Printf(\u0026#34;Hello World!\u0026#34;) }    A file containing Go code has to have the .go extension\n  Every Go programm starts from the main function within the main package\n After one create the file, navigate to the same directory via terminal, and type this command:\ngo build hello.go This will create an executable file with the name hello.\nTo check if the file is correctly, run it by typing ./hello in the terminal whilst in theh same directory. the ouput should be:\n1  Hello World!   Variables \u0026amp; Initialization Data Types \u0026amp; Constants Operators Importing, Exporting \u0026amp; Functions For \u0026amp; Switch If Statements Pointers, Structs, Slices \u0026amp; Arrays Range, Maps \u0026amp; Make Formatted I/O Methods, Pointers \u0026amp; Functions Interfaces ","description":"Everything about Go","id":18,"section":"posts","tags":["go"],"title":"Go","uri":"https://perezre.de/en/posts/tuts/go/"},{"content":"Docker - Fundamentals Overview Containers Images Storage Networking ","description":"Everything about Docker","id":19,"section":"posts","tags":["docker"],"title":"Docker","uri":"https://perezre.de/en/posts/tuts/docker/"},{"content":"Data Analysis - Core Intro What is Data Analysis? Data analysis is the method of discovering useful information from data.\nThe process involves collecting, organizing, exploring and drawing conclusions from data.\n Broadly speaking, one can think of data analysis as translating numbers into meaningful words\n Data analysis is all around - just think about how Netflix chooses which movies to display, and what appears on Instagram newsfeed.\nWalmart uses data analysis to figure out what to stock.\nData Analysis For Everyone Everyone should get better at analyzing data.\n  It\u0026rsquo;s valuable skill.\nAt its heart, data analysis is about problem solving. The ability to think analytically and approach problems in the right way is a skill that\u0026rsquo;s always useful, not just in the professional world, but in everyday life too.\nData analysis skills are more likely to put in high demand when in comes to landing a new role/job. Higher demand -\u0026gt; higher salaries.\n  It\u0026rsquo;s valuable for the company.\nLearning about data analysis will help understand technical teammates, be more independet with the data needs, ask better questions, communicate insights better, and be an analytics translator for the company.\nThe more people that can talk data, the more efficient a company becomes.\n  It\u0026rsquo;s valuable for the world.\nImagine a world where one make well informed decisions on a macro scale. Urban planning, protecting the environment, public health and poverty reduction can all be impacted by data if one learn how to use it effectively.\n  Data Analysis Process The data analysis process.\nThere are 5 key steps:\n Question\nWhat do you want to find out? Data analysis must start with a problem one want to solve. Wrangle\nData wrangling is the process of acquiring and cleaning the data. Explore\nThis is where one use tools to get familar and spot patterns in the data. Conclude\nWhat are the findings? Can one make any predictions? Communicate\nWhat format would work best for sharing the conclusions? A blogpost, email or presentation to inform the colleagues? It\u0026rsquo;s important to know how to use some data visualization tools to bring the findings to life.   These 5 steps don\u0026rsquo;t always happen in a straight line.\n Data wrangling and exploration are heavily intertwined. One\u0026rsquo;ll need to revist and refine one questions throughout as one become more familiar with one data. Sometimes data acquisition comes first!\nData Analysis vs DAta Science Data Analytics and Data Science are both a mishmash of terms which interweave and overlap with one another but are still quite different.\nData Analysis involves answering questions based on the past or present for better business decision making.\nMeanwhile, Data Science focuses on dicovering new questions to drive innovation through machine learning and predictive modelling.\nData Analytics is more specific and concentrated than Data Science. It aims to solve specific problem.\n One don\u0026rsquo;t need to be a Data Analyst or Data Scientist to get going with analysis work.\n It is recommended some dexterity of familiarity in the following areas:\n Knowledge of basic statistics Problem solvin skills Basic/Intermediate level Excel/Google Sheets  For those you can become real data ninjas:\n Understanding of SQL databases and basic queries Experience using business intelligence tools Ability to visualize the results  Terminology Buzzwords Spreadsheets Google Analytics Sales Analytics Marketing Analytics Product Analytics Data Analysis - Data Tools BI Tools - Tableau BI Tools - Locker BI Tools - Mode SQL Python ","description":"Everything about Data Analysis","id":20,"section":"posts","tags":["data analysis"],"title":"Data Analysis","uri":"https://perezre.de/en/posts/tuts/dataanalysis/"},{"content":"Computer Science - Data Structures and Algorithms Intro to Data Structures Intro to Graphs Algorithms I Binary Search Tree Heap and Trie Tree Traversals Algorithms II Graph Algorithms MST Algorithms Computer Science - Networking Fundamentals I Fundamentals II Metrics Tools Intro to HTTP Requests and Responses HTTP Status Codes ","description":"Everything about Computer Science","id":21,"section":"posts","tags":["computer science"],"title":"Computer Science","uri":"https://perezre.de/en/posts/tuts/compsci/"},{"content":"Coding Intro - Core Introduction Intro to Coding If one want to learn to code here one can get started.\nHere will be covered the core features everyone yould know before starting to program. Here will be emphasize key themes and tools that be useful.\nAll programming languages have a handful of building blocks. When combined, they can create any program:\n variables - where data is stored data types - how to tell what\u0026rsquo;s a number or what\u0026rsquo;s text functions - how one can organize commands conditions - how to make yes/no decisions loops - how to repeat behavior  Every concept, feature, technology, or best practice beyond these basic building blocks were invented to help mere humans manage the complexity of larger programs.\nWhy learn to code? Learning how code works isn\u0026rsquo;t only for developers - it can help everyone!\nFor example, one will be able to:\n write programs that automate prcesses and save time (and moeny!) create website for products or projects understand how software works, helping to improve communication and decision making at work better navigate the modern digital world collaborate with developers better  At the end, it will help to maximaize the earning potential!\nHello Code? Here will be using a made-up language on purpose.\nUnderstanding the fundamentals will enable to pick up any real programming language later on.\nWhen one move on to specific programming languages one will be taught the language syntax but the concepts will remain the same.\nWhat\u0026rsquo;s the goal? After reading this, one\u0026rsquo;ll have several options for the next step to take.\nHere are some suggestions:\n Python is a popular language for beginners. It\u0026rsquo;s easy to read, has large community, and ca be used for almost anything. SQL is a querying language and a good option as a stepping stone to learining programming languages and analyzing data. Start programming a website with HTML and CSS  Core Concepts Variables \u0026amp; Data Collections Functions Conditions Loops ","description":"Everything about coding","id":22,"section":"posts","tags":["coding"],"title":"Coding Intro","uri":"https://perezre.de/en/posts/tuts/codingintro/"},{"content":"Blockchain - Fundamentals Introduction The Blockchain The Bitcoin Blockchain Building the Ledger Mining Wallets Bitcoin Anonymity Altcoins Consesus Algorithms Forking Cryptoeconomics Ethereum I Solidity Ethereum II Ethereum on the Web ","description":"Everything about Blockchain","id":23,"section":"posts","tags":["blockchain"],"title":"Blockchain","uri":"https://perezre.de/en/posts/tuts/blockchain/"},{"content":"Airtable - Introduction What\u0026rsquo;s Airtable Basics Templates Views Relationships ","description":"Everything about Airtable","id":24,"section":"posts","tags":["airtable"],"title":"Airtable","uri":"https://perezre.de/en/posts/tuts/airtable/"},{"content":"Git - Essentials What is Git? Git is standard of version control.\nIt\u0026rsquo;s the most commercial (and open-source) projects ust to keep track versions of their products.\n It was developed by Linux Torvalds\n Why Git? Before Git things you had to\n Get all previous changes from the central server. Edit the files and make sure they work. Send all the changes to the central server.  Now with Git, every developer can have their own copy of the project.\nYou call this know Distributed Version Control System (DVCS)\nIf you have a Software with version v2.5 with the next release being v3.0.\nThe users have reported a but in version v2.5, but the release is only couple week away.\nGit lets copy v2.5, fix the bug and release v2.5.1. Everything without touching v.3.0. This is due to how branching works.\nBenefits of Git The Benefits of Git are\n Everything can be done locally. Each clone has a full history of changes. Recreate the main version from local version. Revert the change to fix an unforseen bug. Flexible. Not only for developers.  Installing Git To be able to use Git, you must make it available on your machine.\nYou can install Git in various ways, depending on your Operating System.\nMac OS X You can install Git by running git from the terminal, which will prompt you to proceed with the installation.\nLinux Depending on your Linux distribution and package management tool you cann install Git:\n using dnfon Fedora/Red Hat:  sudo dnf install git using apt on Debian:\nsudo apt install git Windows There are multiple ways of installing Git on Windows.\nThe easiest way is to install GitHub Desktop, which comes with a command line version of Git as well as the GUI.\nAnother option is to install Git for Windows, which brings the full feature set of the Git SCM to Windows.\nGetting Started Basic Git configuration After installation you can customize different variables or information in your Git environment.\nFor example you can change your username and email address so that your work shows your identity.\nGit provides the git configtool, making it easier to change configuration variables that affect how Git works and looks.\nList all current settings:\ngit config --list user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto To see a specific setting:\ngit config user.name John Doe To change your identity:\ngit conifg --global user.name \u0026quot;My Name\u0026quot; git config --global user.email myname@email.com Git will sometimes ask for user input by invoking the systems default text editor. To change what editor is used by Git:\ngit config --global core.editor vim Initializing a Git repository There are two primary ways to include a project under Git control:\n Bring an existing project/directory on your machine under control of Git Import a Git repository from another server by cloning it from within a project\u0026rsquo;s directory:  cd myGreatProject Now you can simply:\ngit init This will create a (hidden) .git subdirectory, enabling Git to manage your source files.\nCloning a Git repository A second way through which you can get your hand on a Git repository is by cloning it.\nThe term cloning entails how the whole Git flow works. Instead of providing a working copy, the git clone command makes a full copy of the repository, including all projects history.\nIf in one case a server failure, corruption or other unfortunate events, any clone can be used to restore the state of the project.\nThe syntax used to clone a repository is:\ngit clone [URL] You can clone any open-source project or even privte ones as long as you have the right credentials.\nFor example, you can clone the reduck library from the specific URL:\ngit clone https://github.com/reduck/reduck Running this command will:\n create a directory named \u0026ldquo;reduck\u0026rdquo; initialize a .git directory inside pull all repository data in the .git directory checkout a working copy of the latest version of the project  Another name for the parent directory can be specified as follows:\ngit clone https://github.com/reduck/repo \\myGreatClone Apart from the https protocol used above, git also suupports transfer through SSH and local protocols.\nSome common terminolgy The most important is to understand the standard terminology in Git in order to adequately grasp how it works.\nThis terminology includes the following terms:\nBranch A branch is a movable pointer. It points always to the most recent commit. Branches are used for different team members to work concurrently without affecting the main repository.\nRevision A revision is different version of the repository.\nCommit As you save your work in a repository you commit the changes (the contents of the working tree). This create a unique commit object that uniquely identifies a new revision of the content in that repository.\nHEAD The HEAD is a reference to the last commit in the branch currently in use.\nTag A tag is a pointer to a specific commit which uniquely identifies a repository version. With Tags are used to easily revert to old versions when in need.\nStaging area The staging area is where work expected to be committed is staged.\nIndex The staging area is also referred to as index.\nCommits What is stored in a commit? When you make a commit, git stores a commit object.\nYou can view the commit information stored in theh commit objects for that repository by using git log.\ngit log commit ac02a5 Author: John Doe \u0026lt;john@doew.com\u0026gt; Date: Thu Feb 30 10:59:21 2021 +0000 changed content of README Each commit object contains a checksum, the author\u0026rsquo;s name and email, the commit message, and a pointer to the commit that came before it (or multiple commits)).\nHow to write a git commit message Each commit message should explain the aim of the commit and why the changes were made.\nFor simple commits, this is an example of best practice:\ngit commit -m \u0026quot;Fix typo in README\u0026quot; For a longer commit, one should leave a line after the subject and include more description in the body of the commit:\ngit commit # commit message editor Redirect user to the login form Issue 4832 Your commit with some useful description of your problem One should stick to a convention that is consistent with the rest of your team.\nCustom commit template One can add a commit message template to git, to help write clear mesages.\nFirst, you can create template file template.txt\nsubject line (max 50 chars) issue no: X commit body (max 72 chars) Then you can set this template to be the default commit editor message using commit.template:\ngit config --global commit.template ~/.template.txt When you run git commit the template will apear in the editor.\nCherry-pick a commit Cherry- picking is a method to apply a single, specific commit from another branch.\nExample:\ngit checkout master git cherry-pick a5829bd5 # merge commit a5829bd5 (from another branch) # with branch master This is most useful when one is unable to merge two branches. For example, one want to fix security issue present in both branches.\nWhat is a checksum? A checksum is a SHA-1 hash, which is a 40-character string of hexadecimal characters.\nExample:\n85d5ff4802678921id5922a24f6836bc0a1c59263 Git refers to everything stored in the database by a checksum that it calculates based on the contents of the file or directory structure.\nWhen one commit some changes, git produces a checksum referring to that commit.\nBy using checksums git can detect if you\u0026rsquo;ve lost information or if a file is corrupt.\nIn most places you can us a shorter version which is a 7-character hex string 58c1ff5\nFundamentals What is Version Control? Version Control defines a system intended to help record and manage changes in source code.\nUsing a Version Control System, or VCS, different versions of a file collection or project can be created or changed, each version is representing the exact state of the project at a given time.\nKeeping this in mind, one can revert, compare and even switch between the versions of a prject\u0026rsquo;s files.\nOther benefits include:\n complete history of file changes, which simplifies tracking and fixing bugs backup is always immediately available team members are able to work concurrently, thus minimizing the risk of conflicts between their work  There are three main distinguishable types of VCS software:\n Local Version Control - the simplest VCS, which works by keeping local copies of the files versions on your computer. Centralised Version Control (CVCS) - developed to make collaboration within a team easier. Instead of a local database, a single centralized sever is used to keep all file versions from which team memebers can check out them. Distributed Version Control (DVCS) - rather than only the latest changes to file, each team member has a full copy of the project including history.  What is Git? Git is the name of the most widely used Distributes Version Control System and is the standard of version control for both commercial and open source projects.\nFundamental to the Git nature, being a DVCS, is the fact that people working on prject will always have a local copy of the project will always have a local copy of the project, the repository, containing the full history of changes. This remote backup of the codebase entails a good layer of protection against data loss.\nOne other characteristic of Git that helps it differentiate from other version control system is security. The content of files, the relationship between then among other Git-specific objects are secured by cryptographic hashing with the SHA1algorithm.\nDifferen from some VCSs, Git versioning (the way it keeps track of different versions of a file) is not based on the names of the files, but on the content of the file itself.\nAs a result of high raw performance from its specialized algorithms, as well as being smart and flexible, Git has become the de facto standard of version control.\nHow does Git work? Being able to use Git effectively requires understanding how it works on a fundamental level.\nFirst, the main difference between Git and other VCSs is the way it handles data. Most systems think of the information they keep as a set of files and the changes made to each file over time.\nInstead, Git thinks of data like a set of snapshots. Conceptually, every time a change is made in the prject, a picture is taken of how every file looks at that moment and a reference to that is stored as a snapshot. The act of saving the snapshot is called commiting. The snapshot stored in the repository is called a commit.\nAdditionally, to grasp the workflow of Git, you must be able to differentiate possible states of a file and to know how to work with them. There are two types of files inside a Git repository:\n untracked: Git doesn\u0026rsquo;t know about the file\u0026rsquo;s existence and can\u0026rsquo;t be included in a commit. tracked: Git will take this file into account when calculating what to be committed.  Another critical aspect of Git is that almost all of its operations are local, with all information such as history being an integral part of the repository. This boosts the speed of many operations and makes working with Git easier than with some other VCSs - since a connection to the Internet is not always necessary.\nThe Git working tree During the development process, a project can grow to thousands of files.\nThose files you are currently working on - and changes that may or may not be committed as part of a Git repository - constitute the working tree. Some of these files may be part of a previous commit, but in a different form.\nThe working tree represents files that have been created, updated or modified and diverge from the contents of the most recent commit.\nTracked files in the working tree are represented in Git based on different statuses:\n modified or dirty: the file is changed, but Git has yet to calculate the differences and label the versions. staged: the differences are calculated, and the new structure of the project can be saved. committed: the new version is safely stored in the repository.  A user can add the changes to a repository at any point through commits, but also revert those changes.\nBranches in Git Branching allows developers to diverge from the main line of development without affecting other work.\nBranching in Git differs dramatically from other VCS and is consideredd its \u0026ldquo;killer feature\u0026rdquo;. Branches in Git are considered lightweight and simple. For that reason branching, which is feared in other VCS is highly encouraged in Git.\nUnderstanding and mastering this is paramount to proficiecy and expertiese with Git.\nConceptually, a branch is divergence at a specific point from your working tree.\nChanges (technically commits) are added to the history of the current branch, resulting in a fork in the project history. In practice, a branch is merely a pointer to a specific commit object.\nWith the git branchcommandn you can create, edit, rename and remove branches.\nBranches are often used as a reference when working with git merge and git checkout.\nTo list all your brnaches:\ngit branch * develop new feature master Create a new branch:\ngit branch my-branch # will not switch to it Delete a branch:\ngit branch -d my-branch # unmerged changes will stop this git branch -D my-branch # will force delete To rename the current branch:\ngit branch -m new-branch-name Thinking of a branch as a pointer to a specific state of the repository, you can visualize how changing to a different branch takes you to a different stage of the same project. Different changes of the same project are stored on different branches. To change the branch you are on, you can use git chekcout\ngit checkout my-branch Local Repository The Local Repository The local Git project is made of three main areas:\n working tree staging area (also know as Index) the .gitdirectory (the repository)  Working tree\nThe working tree is the place where all files exist. This is always a single chekcout of one project\u0026rsquo;s versions.\nStaging area\nUnlike most VCSs, Git has an additional step between the working copy (directory) and the data store (repository). This place is the staging area and letzs you decide what changes are included in a commit.\nRepository\nThe repository is the proprietary datastore where Git maintains the history of the project (all commit objects, tags, and a lot more).\nWorking in the local repository Changing the content of the files in your Git project won\u0026rsquo;t directly affect your local repository. To do this, you must perform some operations to make sure your changes are permanently stored.\nFrom the perspective of Git, files can be:\n tracked - these files were part of the most recent file snapshopt and will be flagged as modified, unmodified or staged. untracked - were not part of the last snapshot, nor are in the staging area.  When Git detects a file is edited and it\u0026rsquo;s different from the previous commit, it will be flagged as modified.\nThe next step is to get the file in the staging area. You can add a snapshot of a file there with the git add command.\nLast, and most important, you permanently store the staged files to the Git repository only when the git commit command is executed.\nTracking and Stagingn files You can easily check the status of your files inside a Git project with the git status command:\ngit status # On branch master # Your branch is up-to-date with # 'origin-master' # nothing to commit, working directory # clean The message in the code snippet above is shown when there are no tracked and modified files.\nLet\u0026rsquo;s suppose you add mytext.txt to your project. Running the same command you will see a different result:\ngit status # On branch develop # You branch ... # Untracked files: # enki.txt # noting add to commit ... One can see that the mytext.txt file is untracked. In order for Git to manage changes in this file (track it) one must use the git add command:\ngit add mytext.txt In case one need to add more than a single file, naming them one by one isn\u0026rsquo;t going to work out. Here are the options for adding multiple files:\n# stages everything git add [-A|--all] git add . # stages everything but new files git add [-u|--update] Running git statusagian, you cann see that the file is now staged and ready to be part of a commit:\ngit status # ... # Changes to be committed: # new file: mytext.txt Committing Committing is the action which permanently stores changes in a file as part of the Git repository. For this operation, one have to do is issue the git commitcommand.\nNormally, Git will never change the contents of a commit, making commits permanent and representative for the state of the project at that time.\nOne can commit the staged snapshot by running:\ngit commit One will be prompeted with the default text editor asking for a commit message. After filling the commit message and saving the file, the actual commit is created.\nTo commit and avoid the text editor one can include a commit message as part of the command like this (-mfor message):\ngit commit -m \u0026quot;My first commit\u0026quot; One can also use the -aflag to commit all changes of tracked files (even though they were modified, but not staged with git add):\ngit commit -a Stashing Another usefule fueature of Git allows one to set aside current work; usually to switch branches without losing uncommitted changes.\nStashing is the action of saving all ones dirty files (modified tracked files and staged changes) in a special stack of commits. Any of the commits in the stash can be later popped, restoring the state of the working tree.\nThe key to this feature is the Git command git stash.\nIf one have some modified files, ine can check on them with git status:\ngit status # ... # Changes to beb committed: # modified: mytext.txt To stash your changes:\ngit stash # Saved working directory and index state # HEAD is not u0374 ... Checking again, the working directory is clean:\ngit status # On branch master # Your branch is up-to-date with # 'origin/master' ... One can see all your stashed changes:\ngit stash list # stash@{0}: WIP on master: 823k824 ... # stash@{1}: WIP on master: 58d28a1 ... To apply the lastest stashed changes:\ngit stash apply To apply a specific stashed set of changes, one must specify its name:\ngit stash apply stash@{2} One can also remove from the stash stack:\ngit stash drop stash@{0} To both apply and drop the stash, the popcommand can be used:\ngit stash pop The Remote Repository Introduction to remote repositories Remote repositories in Git representn a copy of the repository that exists elsewhere (remotely)\nOne can have multiple remote repositories, with different permissions on each one. Some can be read-only while on some you can perform both read and write operations.\nThese remote repositories are useful and, most of the time, represent a requierement when collaborating as part of a team.\nEven though about 90%of version control related work happens on local repositories, the remote ones are needed to share the date between different team members.\nIt is important for a team memeber to know how to manage (add, remove, etc.) and work with data (push and pull changes) from remote repositories to be able to collaborate effectively.\nRemote repositories can be a GitHub repository, a user\u0026rsquo;s fork on a server or just another computer on your local network.\nPushing and Pulling to/from remote repositories can be accomplished with HTTP and SSH protocols.\nGitHub, for example:\n SSL like  https://github.com/user/repo.git\n SSH like  git@github.com:user/repo.git\nWorking with remotes Remote repositories are fundamental to the workflow for theams who need to collaborate.\nOne can see the remote repositories with your project by calling git remote:\ngit remote # origin  Keep in mind that origin is the default name git gives to the server one cloned from.\n Using the -vflag, one can also see the URLs associated with the remotes:\ngit remote -v # origin https://github.com/user/rep (fetch) # origin https://github.com/user/rep (push) One can add new remotes with the git remote add command:\n# git remote add \u0026lt;shortname\u0026gt; \u0026lt;url\u0026gt; git remote add xy https://github.com/us/repo git remote -v # origin https://github.com/user/rep (fetch) # origin https://github.com/user/rep (push) # xy https://github.com/us/repo (fetch) # xy https://github.com/us/repo (push) Tracking and Staging files One can easily check the status of your file inside a Git project with git status command:\ngit status # On branch master # Your branch is up-to-date with # 'origin-master' # nothing to commit, working directory # clean The message in the code snippet above is shown when there are no tracked and modified files.\nLet\u0026rsquo;s suppose one add mytext.txt to your project. Running the same command one will see a different result:\ngit status # In branch develop # Your branch ... # Untracked files: # mytext.txt # nothing added to commit ... One can see that the mytext.txtfile is untracked. In order for Git to manage changes in this file (track it) one must use the git addcommand:\ngit add mytext.txt In case one need to add more than a single file, naming them one by one isn\u0026rsquo;t going to work out. Here is some options for adding multiple files:\n# stages everything git add [-A|--all] git add . # stages everything but new files git add [-u|--update] Running git status again, one can see that the file is now staged and ready to be part of a commit:\ngit status # ... # Changes to be committed: # new file: mytext.txt Merging Merging is the operation of joining two or more development histories (branches) together.\nFor this, Git provides the git merge command:\ngit merge [head] The merging operation will automatically integrate two different branches into a single one.\nEven though the algorithms used for the merge depend on the status of the branches, all of them will merge into the current branch. It is important to understand that the targeted branch is not affected.\nSuppose you are on a branch called featurewhere you committed some work. However, one want to get the feature to the master branch; the main branch of development on your project.\n# Current branch - feature git checkout master # Current branch - master git merge feature # Merging feature INTO master However, merging is not always successful because conflicts can arise when both branches had modifications in the same file(s) (changes since the time they diverged). In this case Git doesn\u0026rsquo;t know what version of the file to choose and requires your guidance.\nOne can check what files weren\u0026rsquo;t successfully merged using the git status command:\ngit status # On branch master # You have unmerged paths. # ... # Unmerged paths: # ... # both modified: file.txt # ... When a merge conflict occurs the git status command even provides one directions on how to proceed.\ngit status # On branch master # You have unmerged paths. # (fix conflicts and run \u0026quot;git commit\u0026quot;) ... In these files one can see the conflict highlighted by the syntax:\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD # master in our case # master version here ======= # feature version here \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; feature Above the ======line one can see the version of the file that was in the HEAD before the merge, while under one can see targeted branch version.\nOne must manually resolve these conflicts (save the file as one wish it to be) and commit the update(s). One may then push the changes.\nPushing Pushing is the way to share/push upstream your work on a remote repository.\nThe basic syntax of the git push command is:\ngit push [remote-name] [branch-name] If you want to push all your local commits to the origin server on the master branch (both automatically named) you can use:\ngit push origin master One can also run git push without arguments to push to the upstream of your current local branch.\nIf, for example, you are on feature branch and you want to set it\u0026rsquo;s upstream you need to use the --set-upstream flat:\ngit push --set-upstream origin feature This will create if it doesn\u0026rsquo;t already exist, a new remote branch called feature, and push all your changes there.\n Keep in mind that the git push command only works if one have write permission to the remote repository.\n If the history differs from your local - due to somebody pushing changes since your last pull or fetch - your push will be rejected. To fix this, you must first fetch, merge (or just pull) their work. Your push will be accepted once all merging conflicts are resolved.\nBranching Fetching a remote branch If one are working on a local version of a remote branch and someone else updates the remote branch, one might want to synchronize your version.\nTo do this, one run git fetch \u0026lt;remote\u0026gt;, which updates your local repository with any changes to the remote.\nExample to synchronize with origin remote:\ngit fetch origin To fetch all the remotes:\ngit fetch --all  Changes are not automatically applied to the local branch, one have to do this yourself with git merge.\n Managing branches If one want to see a list of your branches, one can run git branch:\ngit branch experimental * master noDistractions The * indicates the branch that is checked out.\nOne can use -vto see the last commit on each branch.\nOne can use --merged or --no-merged to list the branches one have or haven\u0026rsquo;t merged to the current branch:\ngit branch --merged * master noDistractions git branch --no-merged experimental Pulling a remote branch git pull is a command that combines git fetch and git merge\nFor example, to fetch and merge the branch master with the current branch:\ngit pull origin The merge is automatic, and you are unable to review the commits. For this reason, sometimes you can use git fetch and git merge instead.\nThere\u0026rsquo;s also the -a (shorthand for --append) flag targeting the fetch part of pulling. It tells git to append new branch HEADs to the .git/FETCH_HEAD file instead of overwriting everything with what\u0026rsquo;s remote.\nPushing to a remote branch If you want to share a branch, you have to push it to the remote.\nTo do this, you run git push \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt;.\nFor example, to push a fix:\ngit push origin scrollFix If one want to push a local branch into a remote branch but call it by a different name, one can use this format:\ngit push origin scrollFix:uiFix Setting the upstream branch When one use the git clone or git checkout commands on a remote repository, a tracking branch is set up automatically.\nInstead, you can explicity set the upstream branch by usiing the -u or --set-upstream-to options.\nFor example, to set the current branch to track the remote branch scrollFix:\ngit branch -u origin/scrollFix What is rebasing? The git rebase command is a way to combine branches. In a basic rebase, you \u0026lsquo;replay\u0026rsquo; the changes made on one branch onto the other.\nFor example, to rebase the changes committed to scrollFixonto master:\ngit checkout scrollFix git rebase master This works by \u0026lsquo;rewinding\u0026rsquo; scrollFixto the commit shared by the two branches and saving the changes in a temorary file. The scrollFix reference is then set to the same as master and the changes are applied.\nYou can then get masterto point at the final commit:\ngit checkout master git merge scrollFix Now if you look at the history, it will seem like all the changes happend in series, when they were made in parallel.\nGit - Workflow Workflow Workflow: long running branches Long-running branches are branches that one create to work on for the long-term.\nFor example, the branch mastercould be for stable code and developfor testing.\nYou could create a fix to a new issue on the topic branch issue03. You could merge this with develop and test its stability:\ngit checkout develop git merge issue03 # merge into develop # test the stability If the fix proves to be stable, one could then merge with master.\nThis can be helpful for large, complex projects.\nWorkflow: topic branches A topic branch is a branch that you create and use for work on a feature.\nThe idea is to work on a fix or an experiment separately from the master branch. This makes it easier to review changes, as all the commits related to one topic.\nFor example, you could work on solving an issue:\ngit checkout -b issue03 # checkout as a new branch \u0026quot;issue03\u0026quot; # fix the issue Once one have solved the problem one can merge it into the master branch:\ngit checkout master git merge issue # merge the fix Then one can delete the topic branch:\ngit branch -d issue03 Squashing commits If one contribute to an open source project, e.g, by submitting a pull request with a bug fix, it should be presented as one unit of code.\nOne should squash your commits together. For example, if one have three commits:\ngit reset HEAD~3 git add . git commit -am \u0026quot;Fix bug #14\u0026quot; git push --force The --force option is needed if the commits have already been pushed, for them to be replaced. Beware that this overwrites the prevous history so always avoid when possible.\nBy sqaushing one can get rid of \u0026quot;fix typo\u0026quot; commits and have all your changes grouped in just one commit. This will keep the maintainer happy!\nGitHub GitHub is the most popular hosting solution for Git repositories. It provides tooling and reliable solutions for version control hosting and is used by millions of developers worldwide.\nIn addition to Git\u0026rsquo;s distributed version control and source code management capabilities, GitHub provides:\n access controll (repositories can be either public or private) bug tracking feature requests task management wiki pages for all projects kanban boards statistics static website hosting etc.  Because projects uploaded to GitHub are not required to meet the Open Source Definition, users are advised to choose the license of every project individually to meet their specific needs.\nFounded in 2007 and continuously improbing GitHub is the most notable place for hosting user\u0026rsquo;s work and enhancing their workflow. It is often considered the Hub of Open Source collaboration and technology learning.\nGeneral GitHub workflow GitHub enhanced Git\u0026rsquo;s collaboration capability with the pull request, providing a GUI way to generate q \u0026lsquo;patch\u0026rsquo;.\nThis set a standard for contributing to saftware projects revolving around the pull request.\nHowever, public collaboration is not the single use case for this workflow. Many private teams employ it to timplify their code review process.\nTo add a feature or an improvement to an existing codebase:\n clone the repository check out the HEADof the development branch - usually masteror develop. make your changes and commit them push the branch to GitHub generate a pull request with the development target branch work with the team to review the pull request (if changes are needed, more commits can be made) when the project owner is ready to accept your proposed changes it can be merged this closes the pull request  Merges Help! Finding Commits Branches ","description":"Everything about Gitc","id":25,"section":"posts","tags":["git"],"title":"What is Git","uri":"https://perezre.de/en/posts/tuts/git/"}]