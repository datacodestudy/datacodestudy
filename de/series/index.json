[{"content":"Teil 1 - Requirements-Engineering zum Erfolg bringen In medias RE Motivation für eine erfolgreiche Systemanalyse Requierements-Engineering ist eine Art Versicherung für Systementwicklungsprojekte\nEntwicklungsprojekte auf diese Versicherung verzichten sind folgende Beispiele:\n Toll Collect A2LL Denver-Koffer-Debakel Rückrufaktionen der Automobilhersteller  Ein konsequentes Requirements-Engineering hätte das eine oder andere Projekt sicherlich besser dastehen lassen.\nDer Requirements-Engineer - Mittler zwischen Welten Requirements-Engineer werden auch Systemanalytiker oder Anforderungsanalytiker oder Business Analyst bezeichnet.\nDie fachlichen und methodischen Kompetenzen, nach IREB e.V. eines Requirements-Engineer sind:\n Analytisches Denken Selbstbewusstsein Empathie Moderationsfähigkeit Überzeugungsfähigkeit Kommunikationsfähigkeit Konfliktlösungsfähigkeit  Das Requirementsgehirn Drei spezialisierte Gehirne:\n Das Requirementsgehirn (Problem = Geschäftsprozess und/oder Systeminhalt) enthält Wissen über die Problemstellung, das Architekturgehirn ist gefüllt mit Wissen um die Lösung und das Managementgehirn enthält Projektwissen, wie Pläne und Schätzungen.  Die Disziplin Requirements-Engineering graph TD; Requirements-Engineering--\u0026gt;Ermitteln; Requirements-Engineering--\u0026gt;Dokumentieren; Requirements-Engineering--\u0026gt;Prüfen; Requirements-Engineering--\u0026gt;Verwalten; Anforderungen dienen als Grundlage für:\n Kommunikation Ermittlung von Rationalisierungspotenzialen Optimierung des Kundennutzens Ausschreibung und Vertragsgestaltung Systemaritektur Test und Abnahme Systemintegration und Wartung Fehlerbehebung und Weiterentwicklung Erhöhung der Miterarbeiterzufriedenheit  Die Einteilung von Anforderungen Die Einteilung die sich in der Praxis bewährt hat:\n funktionale Anforderungen, technologische Anforderungen, Qualitätsanforderungen, Anforderungen an die Benutzungsoberfläche, Anforderungen an sonstige Lieferbestandsteile, Anforderungen an durchzuführende Tötigkeiten, rechtlich-vertragliche Anforderungen.  Gründe für Dokumentation Dokumentation bewahrt Wissen vor dem Vergessen.\nTypische Probleme in der Anforderungsanalyse Qualitätskriterien im Requirements-Engineering Das Bibliotheksystem - wie alles begann Von der Idee zur Spezifikation Agile und andere Vorgehensweisen Teil 2 - Anforderungen ermitteln Ziele, Informanten und Fesseln Anforderungsermittlung - Hellsehen für Fortgeschrittene Das SOPHIST-REgelwerk - Psychotherapie für Anforderungen Teil 3 - Anforderungen formulieren Grundlagen für die Systemanalyse dokumentieren Systemanforderungen dokumentieren - malen oder schreiben? Anforderungsschablonen - der MASTeR-Plan für gute Anforderungen Dokumentation im agilen Umfeld Nicht-funktionale Anforderungen - die heimlichen Stars Teil 4 - Anforderungen prüfen und bewerten Der Qualitätssicherungsprozess - Menetekel oder Wunderheilung? Prüftechniken für Anforderungen - ungeahntes Verbesserungspotenzial Qualitätsmetriken - drum messe, wer sich ewig bindet Anforderungskonsolidierung - wider den Widerspruch Teil 5 - Anforderungen verwalten Requirements-Management - die Reise beginnt Versionen und Zustände - das Leben einer Anforderung Strukturen und Mengen - das Chaos verhindern Change - \u0026amp; Release-Management - die stabile Instabilität Wiederverwendung - aus alt mach neu Teil 6 - Spezialfälle meistern: Einführungsprojekte, Delta Anforderungen, und Usability Engineering Einführungsstrategien - ein Ratgeber für die organisierte REorganisation Der Delte-Anastz - jenseits der grünen Wiese Requirements und Usability - wie sich Anforderungen und Benutzerfreundlichkeit ergänzen ","description":"Aus der Praxis von klassisch bis agil","id":2,"section":"posts","tags":["requirements","engineering","management"],"title":"Requirements-Engineering und -Management","uri":"https://datacodestudy.github.io/datacodestudy/de/posts/remanagement/"},{"content":"Kontaktformular\n","description":"Contact page","id":3,"section":"","tags":null,"title":"Kontakt","uri":"https://datacodestudy.github.io/datacodestudy/de/contact/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":8,"section":"","tags":null,"title":"About","uri":"https://datacodestudy.github.io/datacodestudy/de/about/"}]